/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode solve(ListNode A) {
         if (A == null || A.next == null) {
            return null;
        }
      ListNode t = A;
      ListNode f =A;
      int c=1;
      ListNode prev = null;
      while (f!=null&&f.next!=null){
          prev = t;
      t=t.next;
      f=f.next.next;
      }
// do this so that while loop run 1 times extra
//while (f!=null&&f.next!=null){
// so that in even case, prev will point to first middle element and we can skip the second middle element
//  If this is the condition of that that in the even number of elements we have to delete the first middle then condition will be 
// while(f.next!=null&&f.next.next!=null)     


      if (prev != null) {
            
            prev.next = t.next;
        } else {
            // If the head itself is the middle node
            A = t.next;
        }
      
      return A;
    }
}
