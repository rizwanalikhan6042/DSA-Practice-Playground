public class Solution {
  public int minSq(int n) {
    // Create an array to store the minimum number of squares for each value from 0 to n
    int[] ms = new int[n + 1];

    // Base case: 0 can be represented by 0 squares
    ms[0] = 0;
    
    // Base case: 1 can be represented by 1 square (1^2)
    ms[1] = 1;

    // Fill the ms array for each number from 2 to n
    for (int i = 2; i <= n; i++) {
      // Initialize ms[i] to i, because the maximum possible number of squares needed 
      // for i is i itself (1^2 + 1^2 + ... + 1^2, i times)
      ms[i] = i;

      // Iterate through all possible square numbers less than or equal to i
      for (int j = 1; j * j <= i; j++) {
        // Update ms[i] to the minimum value between the current ms[i]
        // and 1 plus the minimum squares needed for the remaining part (i - j^2)
        ms[i] = Math.min(ms[i], 1 + ms[i - j * j]);
      }
    }

    // Return the minimum number of squares needed to sum up to n
    return ms[n];
  }
}
