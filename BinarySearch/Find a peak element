A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.


class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        int left = 0,right = n-1;
        int mid=0;
        if(n==1){                        // If the array has only one element, it's the peak
            return 0;
        } else if(n==2){                 // If the array has two elements, return the index of the greater element
        if(nums[0]>nums[1])
        return 0;
        else 
        return 1;

        }
        else if(nums[0]>nums[1]){         // If the peak is at the first element, return 0
            return 0;
        }
        else if (nums[n-1]>nums[n-2]){   // If the peak is at the last element, return the last index
         return n-1;
        }
        // Update left and right pointers for binary search
        left = 1 ; right = n-2;
        while(left<=right){
            mid = (left+right)/2;
            if(nums[mid]>=nums[mid-1]&&nums[mid]>=nums[mid+1]){      // Check if nums[mid] is a peak element
                return mid;
            }else if(nums[mid]<=nums[mid-1]){                       // If nums[mid] is not a peak, move to the left
                right = mid-1;
            } else {
                left = mid+1;                                      // If nums[mid] is not a peak, move to the right
            }
        }
      return -1;
    }
}
