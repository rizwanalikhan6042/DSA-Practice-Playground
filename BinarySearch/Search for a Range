Given a sorted array of integers A (0-indexed) of size N, find the left most and the right most index of a given integer B in the array A.

Return an array of size 2, such that 
          First element = Left most index of B in A
          Second element = Right most index of B in A.
If B is not found in A, return [-1, -1].

Note : Your algorithm's runtime complexity must be in the order of O(log n).


public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] searchRange(final int[] A, int B) {
        int n = A.length;
        int[] ans = new int[]{-1, -1}; 

        // Binary search for leftmost occurrence
        int left = 0, right = n - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (A[mid] >= B) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
            if (A[mid] == B) ans[0] = mid;
        }

        left = 0; 
        right = n - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (A[mid] <= B) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
            if (A[mid] == B) ans[1] = mid;
        }
      return ans;
    }
}
