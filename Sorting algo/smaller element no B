public class Solution {
    
   public void merge(final int A[],int s,int m,int e){
       int n1=m-s+1;
       int n2=e-m;
       int temp1[] = new int[n1];
       int temp2[] = new int[n2];
       for(int i=0;i<n1;i++){
           temp1[i]=A[s+i];
       }
       for(int j=0;j<n2;j++){
           temp2[j]=A[m+1+j];
       }
       int k = s , i=0,j=0;
       while(i<n1&&j<n2){
           if(temp1[i]<=temp2[j]){
               A[k]=temp1[i];
               i++;
           }else{
               A[k]=temp2[j];
               j++;
           }
           k++;
       }
       while(i<n1){
        A[k]=temp1[i];
        i++;
        k++;
       }
        while(j<n2){
        A[k]=temp2[j];
        j++;
        k++;
       }

   }

    public void mergesort(final int A[] , int s , int e){
        if(s==e){
            return;
        }
        int m = s+(e-s)/2;
        mergesort(A,s,m);
        mergesort(A,m+1,e);
        merge(A,s,m,e);
    }
    public int Bthsmallest(final int[] A, int B) {
        int n=A.length;
         mergesort(A,0,n-1);
         return A[B-1];
    }
}
