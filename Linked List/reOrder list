/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reorderList(ListNode A) {
       // Find the middle of the list
       ListNode slow = A;
       ListNode fast = A;
       // Check if the list is empty or has only one element
       if(A == null || A.next == null){
           return A;
       }
       // Move slow and fast pointers to find the middle
       while(fast != null && fast.next != null){
           slow = slow.next; // Move slow pointer one step
           fast = fast.next.next; // Move fast pointer two steps
       }
       
       // Split the list into two halves
       ListNode secondHead = slow.next; // Create a new head for the second half of the list
       slow.next = null; // Separate the two halves by setting the next of the middle node to null
       
       // Reverse the second half of the list
       ListNode rh = null;
       while(secondHead != null){
           ListNode t = secondHead;
           secondHead = secondHead.next;
           t.next = rh;
           rh = t;
       }
       
       // Merge the two halves of the list
       ListNode t1 = A;
       ListNode t2 = rh;
       while(t1 != null && t2 != null){
           ListNode f = t1.next;
           ListNode x = t2.next;
           t2.next = f;
           t1.next = t2;
           t1 = f;
           t2 = x;
       }
       return A;
    }
}
